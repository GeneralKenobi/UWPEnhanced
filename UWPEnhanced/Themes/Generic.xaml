<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:UWPEnhanced"
	xmlns:Interactivity="using:Microsoft.Xaml.Interactivity" 
	xmlns:Core="using:Microsoft.Xaml.Interactions.Core"
	xmlns:Animations="using:Microsoft.Toolkit.Uwp.UI.Animations.Behaviors"
	xmlns:Media="using:Microsoft.Xaml.Interactions.Media"
	xmlns:controls="using:UWPEnhanced.Controls">


	<!-- Default style for an Icon -->
	<Style TargetType="controls:Icon">
		<Setter Property="HorizontalAlignment" Value="Center"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}"/>
		<Setter Property="ImageStretch" Value="None"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="controls:Icon">

					<!-- Grid containing both image and font icon, it also provides a background and border -->
					<Grid x:Name="RootGrid"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}"
						Margin="{TemplateBinding Margin}"
						Width="{TemplateBinding Width}"
						Height="{TemplateBinding Height}">

						<Grid.Resources>
							<x:Double x:Key="ScaleTo">0.94</x:Double>
							<Duration x:Key="ScaleDuration">0:0:0.05</Duration>
						</Grid.Resources>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal">
									<Storyboard x:Name="StopScaling">
										<DoubleAnimation Storyboard.TargetName="GridScaleTransform"
											Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
											To="1"
											Duration="{StaticResource ScaleDuration}"/>
										<DoubleAnimation Storyboard.TargetName="GridScaleTransform"
											Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
											To="1"
											Duration="{StaticResource ScaleDuration}"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="GridScaleTransform"
											Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
											To="{StaticResource ScaleTo}"
											Duration="{StaticResource ScaleDuration}"/>
										<DoubleAnimation Storyboard.TargetName="GridScaleTransform"
											Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
											To="{StaticResource ScaleTo}"
											Duration="{StaticResource ScaleDuration}"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						

						<!-- Render transforms of the whole control -->
						<Grid.RenderTransform>
							<!-- Scale transform responsible for actual scaling -->
							<ScaleTransform  x:Name="GridScaleTransform"
								CenterX="{Binding ScaleCenterX, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
								CenterY="{Binding ScaleCenterY, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
						</Grid.RenderTransform>					

						<!-- Triggers for the control -->
						<Interactivity:Interaction.Behaviors>

							<!-- Pointer Pressed Trigger: Goes to Pressed State -->
							<Core:EventTriggerBehavior EventName="PointerPressed">
								<Core:GoToStateAction StateName="Pressed"/>
							</Core:EventTriggerBehavior>

							<!-- Pointer Released Trigger: Goes to Normal state and invokes the command -->
							<Core:EventTriggerBehavior EventName="PointerReleased">
								<Core:GoToStateAction StateName="Normal"/>								
								<!--<Core:InvokeCommandAction CommandParameter="{x:Bind CommandParameter, Mode=OneWay}"
									Command="{x:Bind Command, Mode=OneWay}"/>-->
							</Core:EventTriggerBehavior>

							<!-- Pointer Exited Trigger: Goes to Normal state -->
							<Core:EventTriggerBehavior EventName="PointerExited">
								<Core:GoToStateAction StateName="Normal"/>
							</Core:EventTriggerBehavior>

							<!-- Pointer Cancelled Trigger: Goes to Normal state -->
							<Core:EventTriggerBehavior EventName="PointerCanceled">
								<Core:GoToStateAction StateName="Normal"/>
							</Core:EventTriggerBehavior>

							<!-- Pointer Capture Lost Trigger: Goes to Normal state -->
							<Core:EventTriggerBehavior EventName="PointerCaptureLost">
								<Core:GoToStateAction StateName="Normal"/>
							</Core:EventTriggerBehavior>

						</Interactivity:Interaction.Behaviors>

						<!-- Image on the bottom of the control which may also act as a background -->
						<Image Name="ImageControl"
							Source="{TemplateBinding ImageSource}"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Stretch="{TemplateBinding ImageStretch}"
							Visibility="{Binding ShowImage, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

						<!--Font Icon visible on the top-->
						<FontIcon Visibility="{Binding ShowFontIcon, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
							Glyph="{TemplateBinding Glyph}"
							FontFamily="{TemplateBinding FontFamily}"
							FontSize="{TemplateBinding FontSize}"
							Foreground="{TemplateBinding Foreground}"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							/>

					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>





</ResourceDictionary>
