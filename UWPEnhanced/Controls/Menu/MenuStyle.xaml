<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:xaml="using:UWPEnhanced.Xaml"
	xmlns:converters="using:UWPEnhanced.ValueConverters"
    xmlns:controls="using:UWPEnhanced.Controls">


	<!-- Default style for the menu -->
	<Style TargetType="controls:Menu">
		<Setter Property="SeparatorThickness" Value="2"/>
		<Setter Property="SeparatorBrush" Value="Black"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="controls:Menu">

					<!-- The name is used in code behind to look for certain resources -->
					<Grid Name="RootGrid" Background="Transparent">

						<Grid.Resources>

							<ResourceDictionary>
								<ResourceDictionary.MergedDictionaries>
									<ResourceDictionary Source="ms-appx:///UwpEnhanced/Controls/Icon/Styles/IconWithAnimatedBorderStyle.xaml"/>
								</ResourceDictionary.MergedDictionaries>

								<!--#region ValueConverters -->

								<controls:MenuPositionToItemsDirectionConverter x:Key="ItemsDirectionConverter"/>
								<controls:MenuContentToIconInfoConverter x:Key="MenuContentConverter"
									Owner="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
								<converters:EnumToIntConverter x:Key="EnumToIntConverter"/>
								<converters:OppositeDoubleConverter x:Key="OppositeDoubleConverter"/>								

								<!--#endregion-->

								<!--#region Constants -->

								<!-- ContentTranslate XY values are animated to when Content is slid in-->
								<x:Double x:Key="ContentOpenTranslateXY">0</x:Double>
								<!-- MenuTranslate XY values are animated to when menu is slid in-->
								<x:Double x:Key="MenuOnScreenTranslateXY">0</x:Double>
								<Duration x:Key="OpenCloseStoryboardDuration">0:0:0.25</Duration>
								<Duration x:Key="MenuInOutStoryboardDuration">0:0:0.25</Duration>
								<Duration x:Key="ContentFadeDuration">0:0:0.25</Duration>
								<CubicEase x:Key="DefaultEasing" EasingMode="EaseInOut"/>
							
								<!--#endregion-->

								<!--#region Menu open/close storyboards -->

								<!-- Storyboard use to Open the Menu - animate the TranslateTransform of Content to 0 -->
								<Storyboard x:Key="OpenMenuStoryboard">

									<!-- Animation for X -->
									<DoubleAnimation Storyboard.TargetName="ContentPresenterTranslate"
													EnableDependentAnimation="True"
													Storyboard.TargetProperty="X"
													Duration="{StaticResource OpenCloseStoryboardDuration}"
													To="{StaticResource ContentOpenTranslateXY}"
													EasingFunction="{StaticResource DefaultEasing}"/>

									<!-- Animation for Y -->
									<DoubleAnimation Storyboard.TargetName="ContentPresenterTranslate"
													EnableDependentAnimation="True"
													Storyboard.TargetProperty="Y"
													Duration="{StaticResource OpenCloseStoryboardDuration}"
													To="{StaticResource ContentOpenTranslateXY}"
													EasingFunction="{StaticResource DefaultEasing}"/>

								</Storyboard>

								<!-- Storyboard use to Open the Menu - animate the TranslateTransform of Content (X or Y) to
									the value determined in CodeBehind -->
								<Storyboard x:Key="CloseMenuStoryboard">

									<!-- Animation for X -->
									<DoubleAnimation Storyboard.TargetName="ContentPresenterTranslate"
													EnableDependentAnimation="True"
													Storyboard.TargetProperty="X"
													Duration="{StaticResource OpenCloseStoryboardDuration}"												
													To="{Binding ContentTranslateTransformX, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"
													EasingFunction="{StaticResource DefaultEasing}"/>

									<!-- Animation for Y -->
									<DoubleAnimation Storyboard.TargetName="ContentPresenterTranslate"
													EnableDependentAnimation="True"
													Storyboard.TargetProperty="Y"
													Duration="{StaticResource OpenCloseStoryboardDuration}"
													To="{Binding ContentTranslateTransformY, RelativeSource={RelativeSource Mode=TemplatedParent}}"
													EasingFunction="{StaticResource DefaultEasing}"/>

								</Storyboard>

								<!--#endregion-->

								<!--#region Menu Reposition Storyboards -->
							
								<!-- Storyboard used to slide out the whole menu to left using a TranslateTransform -->
								<Storyboard x:Key="SlideOutToLeft">
									<DoubleAnimation Storyboard.TargetName="MenuTranslateTransform"
												Storyboard.TargetProperty="X"
												Duration="{StaticResource MenuInOutStoryboardDuration}"
												To="{Binding OpenLength, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource OppositeDoubleConverter}}"
												EasingFunction="{StaticResource DefaultEasing}"/>
								</Storyboard>

								<!-- Storyboard used to slide in the whole menu from left using a TranslateTransform -->
								<Storyboard x:Key="SlideInFromLeft">
									<DoubleAnimation Storyboard.TargetName="MenuTranslateTransform"
												Storyboard.TargetProperty="X"
												Duration="{StaticResource MenuInOutStoryboardDuration}"
												To="0"
												From="{Binding OpenLength, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource OppositeDoubleConverter}}"
												EasingFunction="{StaticResource DefaultEasing}"/>

									<!-- Set Y translate to 0 (it's necessary if the menu was slid out to left/right earlier) -->
									<DoubleAnimationUsingKeyFrames Storyboard.TargetName="MenuTranslateTransform"
												Storyboard.TargetProperty="Y">
										<DiscreteDoubleKeyFrame Value="{StaticResource MenuOnScreenTranslateXY}"/>
									</DoubleAnimationUsingKeyFrames>
								</Storyboard>

								<!-- Storyboard used to slide out the whole menu to top using a TranslateTransform -->
								<Storyboard x:Key="SlideOutToTop">
									<DoubleAnimation Storyboard.TargetName="MenuTranslateTransform"
												Storyboard.TargetProperty="Y"
												Duration="{StaticResource MenuInOutStoryboardDuration}"
												To="{Binding OpenLength, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource OppositeDoubleConverter}}"
												EasingFunction="{StaticResource DefaultEasing}"/>
								</Storyboard>

								<!-- Storyboard used to slide in the whole menu from top using a TranslateTransform -->
								<Storyboard x:Key="SlideInFromTop">
									<DoubleAnimation Storyboard.TargetName="MenuTranslateTransform"
												Storyboard.TargetProperty="Y"
												Duration="{StaticResource MenuInOutStoryboardDuration}"
												To="{StaticResource MenuOnScreenTranslateXY}"
												From="{Binding OpenLength, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource OppositeDoubleConverter}}"
												EasingFunction="{StaticResource DefaultEasing}"/>

									<!-- Set X translate to 0 (it's necessary if the menu was slid out to top/bottom earlier) -->
									<DoubleAnimationUsingKeyFrames Storyboard.TargetName="MenuTranslateTransform"
												Storyboard.TargetProperty="X">
										<DiscreteDoubleKeyFrame Value="{StaticResource MenuOnScreenTranslateXY}"/>
									</DoubleAnimationUsingKeyFrames>
								</Storyboard>

								<!-- Storyboard used to slide out the whole menu to right using a TranslateTransform -->
								<Storyboard x:Key="SlideOutToRight">
									<DoubleAnimation Storyboard.TargetName="MenuTranslateTransform"
												Storyboard.TargetProperty="X"
												Duration="{StaticResource MenuInOutStoryboardDuration}"
												To="{Binding OpenLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"
												EasingFunction="{StaticResource DefaultEasing}"/>
								</Storyboard>

								<!-- Storyboard used to slide in the whole menu from right using a TranslateTransform -->
								<Storyboard x:Key="SlideInFromRight">
									<DoubleAnimation Storyboard.TargetName="MenuTranslateTransform"
												Storyboard.TargetProperty="X"
												Duration="{StaticResource MenuInOutStoryboardDuration}"
												To="{StaticResource MenuOnScreenTranslateXY}"
												From="{Binding OpenLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"
												EasingFunction="{StaticResource DefaultEasing}"/>

									<!-- Set Y translate to 0 (it's necessary if the menu was slid out to left/right earlier) -->
									<DoubleAnimationUsingKeyFrames Storyboard.TargetName="MenuTranslateTransform"
												Storyboard.TargetProperty="Y">
										<DiscreteDoubleKeyFrame Value="{StaticResource MenuOnScreenTranslateXY}"/>
									</DoubleAnimationUsingKeyFrames>
								</Storyboard>

								<!-- Storyboard used to slide out the whole menu to bottom using a TranslateTransform -->
								<Storyboard x:Key="SlideOutToBottom">
									<DoubleAnimation Storyboard.TargetName="MenuTranslateTransform"
												Storyboard.TargetProperty="Y"
												Duration="{StaticResource MenuInOutStoryboardDuration}"
												To="{Binding OpenLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"
												EasingFunction="{StaticResource DefaultEasing}"/>
								</Storyboard>

								<!-- Storyboard used to slide in the whole menu from right using a TranslateTransform -->
								<Storyboard x:Key="SlideInFromBottom">
									<DoubleAnimation Storyboard.TargetName="MenuTranslateTransform"
												Storyboard.TargetProperty="Y"
												Duration="{StaticResource MenuInOutStoryboardDuration}"
												To="{StaticResource MenuOnScreenTranslateXY}"
												From="{Binding OpenLength, RelativeSource={RelativeSource Mode=TemplatedParent}}"
												EasingFunction="{StaticResource DefaultEasing}"/>

									<!-- Set X translate to 0 (it's necessary if the menu was slid out to top/bottom earlier) -->
									<DoubleAnimationUsingKeyFrames Storyboard.TargetName="MenuTranslateTransform"
												Storyboard.TargetProperty="X">
										<DiscreteDoubleKeyFrame Value="{StaticResource MenuOnScreenTranslateXY}"/>
									</DoubleAnimationUsingKeyFrames>
								</Storyboard>

								<!--#endregion-->

								<!--#region Content Storyboards -->

								<!-- Storyboard that fades in content. The name is used in code behind -->
								<Storyboard x:Key="TransitionInContentStoryboard">
									<DoubleAnimation Storyboard.TargetName="ContentOwner"
										Storyboard.TargetProperty="Opacity"
										To="1"
										Duration="{StaticResource ContentFadeDuration}"/>
								</Storyboard>

								<!-- Storyboard that fades out content. The name is used in code behind -->
								<Storyboard x:Key="TransitionOutContentStoryboard">
									<DoubleAnimation Storyboard.TargetName="ContentOwner"
										Storyboard.TargetProperty="Opacity"
										To="0"
										Duration="{StaticResource ContentFadeDuration}"/>
								</Storyboard>

								<!--#endregion-->								

							</ResourceDictionary>
						</Grid.Resources>

						<Grid.RenderTransform>
							<TranslateTransform x:Name="MenuTranslateTransform"/>
						</Grid.RenderTransform>

						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>

						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>

						<xaml:VisualManager.VisualSetups>

							<!-- Group for open/closed states. By default the menu is closed - no additional
							setters/animations are required. Opening/Closing is handled by VisualSetup Open -->
							<xaml:VisualSetupGroup Name="StateGroup">

								<!-- Triggers based on IsOpen property on the menu -->
								<xaml:VisualSetupGroup.Triggers>
									<xaml:VisualTransitionCollection>										
										<xaml:VisualTransition TransitionTo="Open">
											<xaml:VisualDataTriggerBool Data="{Binding IsOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}"
												CompareTo="True"/>
										</xaml:VisualTransition>
										<xaml:VisualTransition TransitionTo="Closed">
											<xaml:VisualDataTriggerBool Data="{Binding IsOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}"
												CompareTo="False"/>
										</xaml:VisualTransition>
									</xaml:VisualTransitionCollection>
								</xaml:VisualSetupGroup.Triggers>

								<xaml:VisualSetupDynamic ID="Open"
									TransitionInStoryboard="{StaticResource OpenMenuStoryboard}"
									TransitionOutStoryboard="{StaticResource CloseMenuStoryboard}"/>

								<!-- Sets visibility to collapsed (makes sure that the content won't be seen in unexpected
								places on the screen, for example when changing the position of the menu, if the background 
								is transpart, etc), changes the Open/CloseMenuIcon glyph -->
								<xaml:VisualSetupDynamic ID="Closed" EnterWhenCreated="True">									
									<xaml:VisualSetupDynamic.TemporarySetters>
										<xaml:TemporaryPropertySetter Target="{Binding ElementName=Content, Mode=TwoWay}" Property="Visibility" Value="Collapsed"/>
									</xaml:VisualSetupDynamic.TemporarySetters>
								</xaml:VisualSetupDynamic>
							</xaml:VisualSetupGroup>
							
							<!-- Group managing the properties and animations connected with changing position of the menu -->
							<xaml:VisualSetupGroup Name="Position">

								<xaml:VisualSetupGroup.Triggers>
									<!-- Triggers based on Position property of the control -->
									<xaml:VisualTransitionCollection>
										<xaml:VisualTransition TransitionTo="Left">
											<xaml:VisualDataTriggerMenuPosition Data="{Binding Position, RelativeSource={RelativeSource Mode=TemplatedParent}}"
												ComparisonType="Equal" CompareTo="Left"/>
										</xaml:VisualTransition>
										<xaml:VisualTransition TransitionTo="Top">
											<xaml:VisualDataTriggerMenuPosition Data="{Binding Position, RelativeSource={RelativeSource Mode=TemplatedParent}}"
												ComparisonType="Equal" CompareTo="Top"/>
										</xaml:VisualTransition>
										<xaml:VisualTransition TransitionTo="Right">
											<xaml:VisualDataTriggerMenuPosition Data="{Binding Position, RelativeSource={RelativeSource Mode=TemplatedParent}}"
												ComparisonType="Equal" CompareTo="Right"/>
										</xaml:VisualTransition>
										<xaml:VisualTransition TransitionTo="Bottom">
											<xaml:VisualDataTriggerMenuPosition Data="{Binding Position, RelativeSource={RelativeSource Mode=TemplatedParent}}"
												ComparisonType="Equal" CompareTo="Bottom"/>
										</xaml:VisualTransition>

									</xaml:VisualTransitionCollection>
								</xaml:VisualSetupGroup.Triggers>

								<!-- First setup applies the setters which reposition the icons and content on the RootGrid -->
								<xaml:VisualSetupCascade ID="Left">
									<xaml:VisualSetupCascade.Setters>
										<xaml:PropertySetter Target="{Binding ElementName=RootGrid, Mode=TwoWay}" Property="HorizontalAlignment" Value="Left"/>
										<xaml:PropertySetter Target="{Binding ElementName=RootGrid, Mode=TwoWay}" Property="VerticalAlignment" Value="Stretch"/>
										<xaml:BindablePropertySetter Property="{Binding ElementName=IconsPresenter, Path=FlowDirection, Mode=TwoWay}" Value="TopToBottom"/>
										<xaml:BindablePropertySetter Property="{Binding ElementName=ContentIconsPresenter, Path=FlowDirection, Mode=TwoWay}" Value="TopToBottom"/>
									</xaml:VisualSetupCascade.Setters>
									<xaml:VisualSetupCascade.TemporarySetters>
										<xaml:TemporaryPropertySetter Target="{Binding ElementName=Separator, Mode=TwoWay}" Property="Height" Value="NaN"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Separator, Path=(Grid.Row), Mode=TwoWay}" Value="0"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Separator, Path=(Grid.RowSpan), Mode=TwoWay}" Value="3"/>
										<xaml:TemporaryPropertySetter Target="{Binding ElementName=IconsPresenter, Mode=TwoWay}" Property="Height" Value="NaN"/>
										<xaml:TemporaryPropertySetter Target="{Binding ElementName=Content, Mode=TwoWay}" Property="Height" Value="NaN"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=IconsPresenter, Path=(Grid.Column), Mode=TwoWay}" Value="0"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Content, Path=(Grid.Column), Mode=TwoWay}" Value="2"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=IconsPresenter, Path=(Grid.RowSpan), Mode=TwoWay}" Value="3"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Content, Path=(Grid.RowSpan), Mode=TwoWay}" Value="3"/>
									</xaml:VisualSetupCascade.TemporarySetters>

									<!-- Second setup animates the menu into the screen -->
									<xaml:VisualSetupCascade.Cascade>
										<xaml:VisualSetupCascade TransitionInStoryboard="{StaticResource SlideInFromLeft}"
											TransitionOutStoryboard="{StaticResource SlideOutToLeft}"/>
									</xaml:VisualSetupCascade.Cascade>

								</xaml:VisualSetupCascade>

								<!-- First setup applies the setters which reposition the icons and content on the RootGrid -->
								<xaml:VisualSetupCascade ID="Top">
									<xaml:VisualSetupCascade.Setters>
										<xaml:PropertySetter Target="{Binding ElementName=RootGrid, Mode=TwoWay}" Property="HorizontalAlignment" Value="Stretch"/>
										<xaml:PropertySetter Target="{Binding ElementName=RootGrid, Mode=TwoWay}" Property="VerticalAlignment" Value="Top"/>
										<xaml:BindablePropertySetter Property="{Binding ElementName=IconsPresenter, Path=FlowDirection, Mode=TwoWay}" Value="LeftToRight"/>
										<xaml:BindablePropertySetter Property="{Binding ElementName=ContentIconsPresenter, Path=FlowDirection, Mode=TwoWay}" Value="LeftToRight"/>
									</xaml:VisualSetupCascade.Setters>
									<xaml:VisualSetupCascade.TemporarySetters>
										<xaml:TemporaryPropertySetter Target="{Binding ElementName=IconsPresenter, Mode=TwoWay}" Property="Width" Value="NaN"/>
										<xaml:TemporaryPropertySetter Target="{Binding ElementName=Separator, Mode=TwoWay}" Property="Width" Value="NaN"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Separator, Path=(Grid.Column), Mode=TwoWay}" Value="0"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Separator, Path=(Grid.ColumnSpan), Mode=TwoWay}" Value="3"/>
										<xaml:TemporaryPropertySetter Target="{Binding ElementName=Content, Mode=TwoWay}" Property="Width" Value="NaN"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=IconsPresenter, Path=(Grid.Row), Mode=TwoWay}" Value="0"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Content, Path=(Grid.Row), Mode=TwoWay}" Value="2"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=IconsPresenter, Path=(Grid.ColumnSpan), Mode=TwoWay}" Value="3"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Content, Path=(Grid.ColumnSpan), Mode=TwoWay}" Value="3"/>
									</xaml:VisualSetupCascade.TemporarySetters>

									<!-- Second setup animates the menu into the screen -->
									<xaml:VisualSetupCascade.Cascade>
										<xaml:VisualSetupCascade TransitionInStoryboard="{StaticResource SlideInFromTop}"
											TransitionOutStoryboard="{StaticResource SlideOutToTop}"/>
									</xaml:VisualSetupCascade.Cascade>

								</xaml:VisualSetupCascade>

								
								<!-- First setup applies the setters which reposition the icons and content on the RootGrid -->
								<xaml:VisualSetupCascade ID="Right">
									<xaml:VisualSetupCascade.Setters>
										<xaml:PropertySetter Target="{Binding ElementName=RootGrid, Mode=TwoWay}" Property="HorizontalAlignment" Value="Right"/>
										<xaml:PropertySetter Target="{Binding ElementName=RootGrid, Mode=TwoWay}" Property="VerticalAlignment" Value="Stretch"/>
										<xaml:BindablePropertySetter Property="{Binding ElementName=IconsPresenter, Path=FlowDirection, Mode=TwoWay}" Value="TopToBottom"/>
										<xaml:BindablePropertySetter Property="{Binding ElementName=ContentIconsPresenter, Path=FlowDirection, Mode=TwoWay}" Value="TopToBottom"/>
									</xaml:VisualSetupCascade.Setters>
									<xaml:VisualSetupCascade.TemporarySetters>
										<xaml:TemporaryPropertySetter Target="{Binding ElementName=Separator, Mode=TwoWay}" Property="Height" Value="NaN"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Separator, Path=(Grid.Row), Mode=TwoWay}" Value="0"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Separator, Path=(Grid.RowSpan), Mode=TwoWay}" Value="3"/>
										<xaml:TemporaryPropertySetter Target="{Binding ElementName=IconsPresenter, Mode=TwoWay}" Property="Height" Value="NaN"/>
										<xaml:TemporaryPropertySetter Target="{Binding ElementName=Content, Mode=TwoWay}" Property="Height" Value="NaN"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=IconsPresenter, Path=(Grid.Column), Mode=TwoWay}" Value="2"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Content, Path=(Grid.Column), Mode=TwoWay}" Value="0"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=IconsPresenter, Path=(Grid.RowSpan), Mode=TwoWay}" Value="3"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Content, Path=(Grid.RowSpan), Mode=TwoWay}" Value="3"/>
									</xaml:VisualSetupCascade.TemporarySetters>

									<!-- Second setup animates the menu into the screen -->
									<xaml:VisualSetupCascade.Cascade>
										<xaml:VisualSetupCascade TransitionInStoryboard="{StaticResource SlideInFromRight}"
											TransitionOutStoryboard="{StaticResource SlideOutToRight}"/>
									</xaml:VisualSetupCascade.Cascade>

								</xaml:VisualSetupCascade>

								<!-- First setup applies the setters which reposition the icons and content on the RootGrid -->
								<xaml:VisualSetupCascade ID="Bottom">
									<xaml:VisualSetupCascade.Setters>
										<xaml:PropertySetter Target="{Binding ElementName=RootGrid, Mode=TwoWay}" Property="HorizontalAlignment" Value="Stretch"/>
										<xaml:PropertySetter Target="{Binding ElementName=RootGrid, Mode=TwoWay}" Property="VerticalAlignment" Value="Bottom"/>
										<xaml:BindablePropertySetter Property="{Binding ElementName=IconsPresenter, Path=FlowDirection, Mode=TwoWay}" Value="LeftToRight"/>
										<xaml:BindablePropertySetter Property="{Binding ElementName=ContentIconsPresenter, Path=FlowDirection, Mode=TwoWay}" Value="LeftToRight"/>
									</xaml:VisualSetupCascade.Setters>
									<xaml:VisualSetupCascade.TemporarySetters>
										<xaml:TemporaryPropertySetter Target="{Binding ElementName=Separator, Mode=TwoWay}" Property="Width" Value="NaN"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Separator, Path=(Grid.Column), Mode=TwoWay}" Value="0"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Separator, Path=(Grid.ColumnSpan), Mode=TwoWay}" Value="3"/>
										<xaml:TemporaryPropertySetter Target="{Binding ElementName=IconsPresenter, Mode=TwoWay}" Property="Width" Value="NaN"/>
										<xaml:TemporaryPropertySetter Target="{Binding ElementName=Content, Mode=TwoWay}" Property="Width" Value="NaN"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=IconsPresenter, Path=(Grid.Row), Mode=TwoWay}" Value="2"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Content, Path=(Grid.Row), Mode=TwoWay}" Value="0"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=IconsPresenter, Path=(Grid.ColumnSpan), Mode=TwoWay}" Value="3"/>
										<xaml:TemporaryBindablePropertySetter Property="{Binding ElementName=Content, Path=(Grid.ColumnSpan), Mode=TwoWay}" Value="3"/>
									</xaml:VisualSetupCascade.TemporarySetters>

									<!-- Second setup animates the menu into the screen -->
									<xaml:VisualSetupCascade.Cascade>
										<xaml:VisualSetupCascade TransitionInStoryboard="{StaticResource SlideInFromBottom}"
											TransitionOutStoryboard="{StaticResource SlideOutToBottom}"/>
									</xaml:VisualSetupCascade.Cascade>

								</xaml:VisualSetupCascade>

							</xaml:VisualSetupGroup>

						</xaml:VisualManager.VisualSetups>

						<!-- Border in which the ContentPresenter for content is located -->
						<Border Name="Content"							
							Padding="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}"
							Width="{TemplateBinding ContentLength}"
							Height="{TemplateBinding ContentLength}">

							<Border.RenderTransform>
								<!-- These Bindings make sure that when the Menu position changes and the menu is closed its position
								will be readjusted to stay hidden -->
								<TranslateTransform x:Name="ContentPresenterTranslate"
									X="{Binding ContentTranslateTransformXCorrection, RelativeSource={RelativeSource Mode=TemplatedParent}}"
									Y="{Binding ContentTranslateTransformYCorrection, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
							</Border.RenderTransform>

							<!-- Directly hosts the presented content -->
							<ContentPresenter Name="ContentOwner"
								Content="{Binding SelectedContent, RelativeSource={RelativeSource Mode=TemplatedParent}}"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"/>

						</Border>
						
						 <!--The whole panel with controls--> 
						<controls:ItemsContainer Name="IconsPresenter"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Width="{TemplateBinding IconsPanelLength}"
							Height="{TemplateBinding IconsPanelLength}"
							Padding="{TemplateBinding IconsPanelPadding}">

							<!-- Expand/Collapse menu Icon -->
							<controls:Icon Name="OpenCloseMenuIcon"
								Style="{StaticResource IconWithAnimatedBorderStyle}"
								Glyph="&#xE700;"
								Command="{Binding OpenCloseMenuCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

							<!-- Menu repositioning tool Icon, the name is used in code behind but is not critical
							for the operation of the control (used to asign this icon's command parameter as the default
							content if the repositioning tool is enabled -->
							<controls:Icon Name="MenuRepositioningTool"
								Style="{StaticResource IconWithAnimatedBorderStyle}"
								Glyph="&#xE759;"								
								Command="{Binding IconPressedCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}">

								<!-- The menu repositioning tool -->
								<controls:Icon.CommandParameter>
									<Grid Width="{TemplateBinding ContentLength}"
										Height="{TemplateBinding ContentLength}">

										<!-- Make a 3x3 grid for the arrows -->
										<Grid.RowDefinitions>
											<RowDefinition Height="*"/>
											<RowDefinition Height="*"/>
											<RowDefinition Height="*"/>
										</Grid.RowDefinitions>

										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="*"/>
											<ColumnDefinition Width="*"/>
											<ColumnDefinition Width="*"/>
										</Grid.ColumnDefinitions>

										<!-- Position on the left -->
										<controls:Icon Glyph="&#xE973;"
											Grid.Row="1"
											Command="{Binding RepositionMenuCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
											CommandParameter="Left"/>

										<!-- Position on the top -->
										<controls:Icon Glyph="&#xE971;"
											Grid.Column="1"
											Command="{Binding RepositionMenuCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
											CommandParameter="Top"/>

										<!-- Position on the right -->
										<controls:Icon Glyph="&#xE974;"
											Grid.Row="1"
											Grid.Column="2"
											Command="{Binding RepositionMenuCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
											CommandParameter="Right"/>

										<!-- Position on the bottom -->
										<controls:Icon Glyph="&#xE972;"
											Grid.Row="2"
											Grid.Column="1"
											Command="{Binding RepositionMenuCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
											CommandParameter="Bottom"/>

									</Grid>
								</controls:Icon.CommandParameter>

							</controls:Icon>

							<!-- Icons for the content put into the menu -->
							<controls:ItemsContainer Name="ContentIconsPresenter"
								ItemSpacing="10"
								ItemsSource="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay, Converter={StaticResource MenuContentConverter}}">

								<controls:ItemsContainer.ItemTemplate>
									<DataTemplate>
										<controls:Icon Glyph="{Binding Glyph}"
										Style="{StaticResource IconWithAnimatedBorderStyle}"
										ImageSource="{Binding Image}"
										ImageStretch="Uniform"
										Command="{Binding IconPressedCommand}"
										CommandParameter="{Binding RepresentedElement}"/>
									</DataTemplate>
								</controls:ItemsContainer.ItemTemplate>
							</controls:ItemsContainer>

						</controls:ItemsContainer>

						<Rectangle Name="Separator"
							Grid.Row="1"
							Grid.Column="1"
							Fill="{TemplateBinding SeparatorBrush}"
							Width="{TemplateBinding SeparatorThickness}"
							Height="{TemplateBinding SeparatorThickness}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"/>

					</Grid>
					
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


</ResourceDictionary>
