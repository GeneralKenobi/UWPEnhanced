<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="using:UWPEnhanced.Controls"
	xmlns:xaml="using:UWPEnhanced.Xaml"
	xmlns:converters="using:UWPEnhanced.ValueConverters">


	<Style TargetType="controls:DropDownControl">
		<Setter Property="FontSize" Value="18"/>
		<Setter Property="Foreground" Value="Black"/>
		<Setter Property="HeaderBackground" Value="Gray"/>
		<Setter Property="Background" Value="LightGray"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="controls:DropDownControl">

					<Grid Background="{TemplateBinding Background}"
						Width="{TemplateBinding Width}">

						<Grid.Resources>
							<ResourceDictionary>

								<!--#region Header resources -->

								<x:String x:Key="HeaderIconGlyph">&#xE76C;</x:String>

								<!--#endregion-->

								<!--#region Transition animations values -->

								<Duration x:Key="TransitionDuration">0:0:0.08</Duration>
								<x:Double x:Key="DroppedOpacity">1</x:Double>
								<x:Double x:Key="CollapsedOpacity">0</x:Double>
								<x:Double x:Key="DroppedIconRotationAngle">90</x:Double>
								<x:Double x:Key="CollapsedIconRotationAngle">0</x:Double>
								<ExponentialEase x:Key="TransitionEase" EasingMode="EaseInOut"/>

								<!--#endregion-->

								<!--#region Pointer animations values -->

								<Duration x:Key="PointerAnimationDuration">0:0:0.05</Duration>
								<x:Double x:Key="PointerPressedScale">0.95</x:Double>
								<x:Double x:Key="PointerReleasedScale">1</x:Double>

								<!--#endregion-->

								<!--#region Transition storyboards -->

								<!-- Fades in the expanded part of control by animating opacity and rotates the arrow icon in the header to
									point downwards -->
								<Storyboard x:Key="TransitionIntoDroppedStoryboard">
									<!-- Fade in animation -->
									<DoubleAnimation Storyboard.TargetName="ContentInDropDown"
										Storyboard.TargetProperty="Opacity"
										EnableDependentAnimation="True"
										Duration="{StaticResource TransitionDuration}"
										To="{StaticResource DroppedOpacity}"
										EasingFunction="{StaticResource TransitionEase}"/>
									<!-- Icon rotation animation -->
									<DoubleAnimation Storyboard.TargetName="HeaderIconRotateTransform"
										Storyboard.TargetProperty="Angle"
										EnableDependentAnimation="True"
										Duration="{StaticResource TransitionDuration}"
										To="{StaticResource DroppedIconRotationAngle}"
										EasingFunction="{StaticResource TransitionEase}"/>
								</Storyboard>

								<!-- Fades out the expanded part of control by animating opacity and rotates the arrow icon in the header to
									point to the right -->
								<Storyboard x:Key="TransitionOutOfDroppedStoryboard">
									<!-- Fade out animation -->
									<DoubleAnimation Storyboard.TargetName="ContentInDropDown"
										Storyboard.TargetProperty="Opacity"
										EnableDependentAnimation="True"
										Duration="{StaticResource TransitionDuration}"
										To="{StaticResource CollapsedOpacity}"
										EasingFunction="{StaticResource TransitionEase}"/>
									<!-- Icon rotation animation -->
									<DoubleAnimation Storyboard.TargetName="HeaderIconRotateTransform"
										Storyboard.TargetProperty="Angle"
										EnableDependentAnimation="True"
										Duration="{StaticResource TransitionDuration}"
										To="{StaticResource CollapsedIconRotationAngle}"
										EasingFunction="{StaticResource TransitionEase}"/>
								</Storyboard>

								<!--#endregion-->

								<!--#region VisualSetup setters -->

								<!-- -->
								<xaml:VisualSetterCollection x:Key="DroppedSetters">
									<xaml:PropertySetter Target="{Binding ElementName=ContentInDropDown, Mode=TwoWay}"
										Property="Visibility"
										Value="Visible"/>
								</xaml:VisualSetterCollection>

								<xaml:VisualSetterCollection x:Key="CollapsedSetters">
									<xaml:PropertySetter Target="{Binding ElementName=ContentInDropDown, Mode=TwoWay}"
										Property="Visibility"
										Value="Collapsed"/>
								</xaml:VisualSetterCollection>

								<!--#endregion-->

								<!--#region Pointer animations storyboards -->

								<!-- Scales down the header a little bit -->
								<Storyboard x:Key="PointerPressedStoryboard">
									<!-- ScaleX -->
									<DoubleAnimation Storyboard.TargetName="HeaderScaleTransform"
										Storyboard.TargetProperty="ScaleX"
										Duration="{StaticResource PointerAnimationDuration}"
										To="{StaticResource PointerPressedScale}"/>
									<!-- ScaleY -->
									<DoubleAnimation Storyboard.TargetName="HeaderScaleTransform"
										Storyboard.TargetProperty="ScaleY"
										Duration="{StaticResource PointerAnimationDuration}"
										To="{StaticResource PointerPressedScale}"/>
								</Storyboard>

								<!-- Scales back the header a little bit -->
								<Storyboard x:Key="PointerReleasedStoryboard" Duration="0:0:0.05">
									<!-- ScaleX -->
									<DoubleAnimation Storyboard.TargetName="HeaderScaleTransform"
										Storyboard.TargetProperty="ScaleX"
										Duration="{StaticResource PointerAnimationDuration}"
										To="{StaticResource PointerReleasedScale}"/>
									<!-- ScaleY -->
									<DoubleAnimation Storyboard.TargetName="HeaderScaleTransform"
										Storyboard.TargetProperty="ScaleY"
										Duration="{StaticResource PointerAnimationDuration}"
										To="{StaticResource PointerReleasedScale}"/>
								</Storyboard>

								<!--#endregion-->

							</ResourceDictionary>
						</Grid.Resources>

						<Grid.RowDefinitions>
							<!-- Header -->
							<RowDefinition Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=HeaderHeight, Converter={converters:DoubleToGridLengthMEC Unit=Pixel}}"/>
							<!-- Dropdown content -->
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>

						<xaml:VisualManager.VisualSetups>
							
							<!-- Group defining transitions for switching between dropped and collapsed states -->
							<xaml:VisualSetupGroup Name="DropDownGroup">

								<!-- Triggers for transitions between setups -->
								<xaml:VisualSetupGroup.Triggers>
									<xaml:VisualTransitionCollection>

										<!-- Transition to Dropped when IsDropped is set to true -->
										<xaml:VisualTransition TransitionTo="DroppedEntryPoint">
											<xaml:VisualDataTriggerBool Data="{Binding IsDropped, RelativeSource={RelativeSource Mode=TemplatedParent}}"
												CompareTo="True"/>
										</xaml:VisualTransition>

										<!-- Transition to Collapsed when IsDropped is set to false -->
										<xaml:VisualTransition TransitionTo="Collapsed">
											<xaml:VisualDataTriggerBool Data="{Binding IsDropped, RelativeSource={RelativeSource Mode=TemplatedParent}}"
											CompareTo="False"/>
										</xaml:VisualTransition>
									</xaml:VisualTransitionCollection>									
								</xaml:VisualSetupGroup.Triggers>

								<!-- Dropped setup is created in the following way: first the DroppedEntryPoint is entered in order to set the
									expanded content to visible. Then animations that transition into that state happen - otherwise they wouldn't
									be seen. The animations (both in and out of state) are provided by DroppedAnimations setup -->
								<xaml:VisualSetupTemporary ID="DroppedEntryPoint" Setters="{StaticResource DroppedSetters}"
									NextSetup="DroppedAnimations"/>

								<!-- Animates in and out of dropped state -->
								<xaml:VisualSetupDynamic ID="DroppedAnimations" 
									TransitionInStoryboard="{StaticResource TransitionIntoDroppedStoryboard}"
									TransitionOutStoryboard="{StaticResource TransitionOutOfDroppedStoryboard}"/>

								<!-- State for when the control is collapsed, sets the visibility of the expanded content to collapsed -->
								<xaml:VisualSetupDynamic ID="Collapsed"
									Setters="{StaticResource CollapsedSetters}"/>

							</xaml:VisualSetupGroup>
						</xaml:VisualManager.VisualSetups>

						<!-- Header -->
						<Grid x:Name="HeaderGrid"
							Background="{TemplateBinding HeaderBackground}"
							RenderTransformOrigin="0.5 0.5">

							<!-- Transform used for animating pointer events -->
							<Grid.RenderTransform>
								<ScaleTransform x:Name="HeaderScaleTransform"/>
							</Grid.RenderTransform>

							<xaml:VisualAttachments.AttachedVisuals>
								<!-- Toggle state of the control (drop / collapse) -->
								<xaml:ParametrizedVisualCommand Command="{Binding ToggleControlStateCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}">
									<!-- Use Tapped event as trigger-->
									<xaml:VisualTappedTrigger SetHandled="True"/>
								</xaml:ParametrizedVisualCommand>
							</xaml:VisualAttachments.AttachedVisuals>

							<xaml:VisualManager.VisualSetups>

								<!-- Group defining  -->
								<xaml:VisualSetupGroup Name="PointerAnimations">
									
									<xaml:VisualSetupGroup.Triggers>
										<xaml:VisualTransitionCollection>

											<!-- Go to PointerPressed state on PointerPressed event -->
											<xaml:VisualTransition TransitionTo="PointerPressed">
												<xaml:VisualPointerTrigger PointerEvent="PointerPressed" Target="{Binding ElementName=HeaderGrid}"
													SetHandled="True"/>
											</xaml:VisualTransition>

											<!-- Leave the current state on events that occur when pointer is released or otherwise lost -->
											<xaml:VisualTransition TransitionTo="">
												<xaml:VisualPointerTrigger PointerEvent="PointerReleased, PointerExited, PointerCanceled, PointerCaptureLost" Target="{Binding ElementName=HeaderGrid}"
													SetHandled="True"/>
											</xaml:VisualTransition>

										</xaml:VisualTransitionCollection>
									</xaml:VisualSetupGroup.Triggers>

									<!-- Setup defining transition into and out of Pointer Pressed state -->
									<xaml:VisualSetupDynamic ID="PointerPressed" TransitionInStoryboard="{StaticResource PointerPressedStoryboard}"
										TransitionOutStoryboard="{StaticResource PointerReleasedStoryboard}"/>

								</xaml:VisualSetupGroup>
							</xaml:VisualManager.VisualSetups>

							<Grid.ColumnDefinitions>
								<!-- Arrow indicating if control is dropped down or not, bind the width to the height of the header
									the Icon is rectangular -->
								<ColumnDefinition Width="Auto"/>
								<!-- Separator column with constant width -->
								<ColumnDefinition Width="10"/>
								<!-- Column for header text display -->
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>

							<!-- Icon used to represent the state of the drop down control -->
							<FontIcon FontSize="{TemplateBinding FontSize}"
								Foreground="{TemplateBinding Foreground}"
								Glyph="{StaticResource HeaderIconGlyph}"
								Margin="10 0 0 0"
								RenderTransformOrigin="0.5 0.5">

								<!-- Rotate transform used to animate the arrow when the control is dropped and collapsed -->
								<FontIcon.RenderTransform>
									<RotateTransform x:Name="HeaderIconRotateTransform"/>
								</FontIcon.RenderTransform>
								
							</FontIcon>

							<!-- Header text -->
							<TextBlock Text="{TemplateBinding HeaderText}"
								Grid.Column="2"
								Margin="0 0 10 0"
								HorizontalAlignment="Center"
								Foreground="{TemplateBinding Foreground}"
								FontSize="{TemplateBinding FontSize}"
								VerticalAlignment="Center"/>
								
						</Grid>

						<!-- Presents content in the expanded section, by default visibility is set to collapsed and opacity is set to value
							assigned to collapsed state -->
						<ContentPresenter x:Name="ContentInDropDown"
							Content="{TemplateBinding Content}"
							Opacity="{StaticResource CollapsedOpacity}"
							Visibility="Collapsed"
							Grid.Row="1"/>

					</Grid>


				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>