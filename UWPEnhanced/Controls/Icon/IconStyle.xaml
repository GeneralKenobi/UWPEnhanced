<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:Interactivity="using:Microsoft.Xaml.Interactivity" 
	xmlns:Core="using:Microsoft.Xaml.Interactions.Core"
	xmlns:Animations="using:Microsoft.Toolkit.Uwp.UI.Animations.Behaviors"
	xmlns:Media="using:Microsoft.Xaml.Interactions.Media"
    xmlns:controls="using:UWPEnhanced.Controls"
    xmlns:xaml="using:UWPEnhanced.Xaml">


	<!-- Default style for an Icon -->
	<Style TargetType="controls:Icon">
		<Setter Property="HorizontalAlignment" Value="Center"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}"/>
		<Setter Property="FontSize" Value="20"/>
		<Setter Property="Padding" Value="5"/>
		<Setter Property="ImageStretch" Value="None"/>
		<Setter Property="HighlightBrush" Value="White"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="controls:Icon" x:Name="Template">
									
					<!-- Main container, presents background and border brush -->
					<Grid x:Name="RootGrid"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"						
						Width="{TemplateBinding Width}"
						Height="{TemplateBinding Height}">
						

						<!-- Resources - all cosntant values used below are here -->
						<Grid.Resources>
							<x:Double x:Key="ScaleTo">0.94</x:Double>
							<Duration x:Key="ScaleDuration">0:0:0.05</Duration>
							<Duration x:Key="HighlightChangeDuration">0:0:0.1</Duration>
							<x:Double x:Key="HighlightPresentOpacity">0.25</x:Double>
							<x:Double x:Key="HighlightHiddenOpacity">0</x:Double>
						</Grid.Resources>


						<!-- Visual states-->
						<VisualStateManager.VisualStateGroups>
							
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>

									<VisualTransition To="PointerOver"
										GeneratedDuration="0:0:0.1">
										<Storyboard>
											<Storyboard>
												<!-- Change highlight opacity to present opacity -->
												<DoubleAnimation Storyboard.TargetName="HighlightRectangle"
													Storyboard.TargetProperty="(Rectangle.Opacity)"
													To="{StaticResource HighlightPresentOpacity}"
													Duration="{StaticResource HighlightChangeDuration}"/>
											</Storyboard>
										</Storyboard>	
									</VisualTransition>

									<VisualTransition To="Pressed"
										GeneratedDuration="0:0:0.1">
										<Storyboard>
											<Storyboard>
												<!-- Change highlight opacity to present opacity -->
												<DoubleAnimation Storyboard.TargetName="HighlightRectangle"
													Storyboard.TargetProperty="(Rectangle.Opacity)"
													To="{StaticResource HighlightPresentOpacity}"
													Duration="{StaticResource HighlightChangeDuration}"/>
												<!-- Scale the child elements down to simulate press -->
												<DoubleAnimation Storyboard.TargetName="GridScaleTransform"
													Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
													To="{StaticResource ScaleTo}"
													Duration="{StaticResource ScaleDuration}"/>
												<DoubleAnimation Storyboard.TargetName="GridScaleTransform"
													Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
													To="{StaticResource ScaleTo}"
													Duration="{StaticResource ScaleDuration}"/>
											</Storyboard>
										</Storyboard>
									</VisualTransition>

								</VisualStateGroup.Transitions>

								<!-- Normal - pointer is outisde of thefont icon -->
								<VisualState x:Name="Normal">
									<Storyboard>
										<!-- Return the highlight to hidden opacity -->
										<DoubleAnimation Storyboard.TargetName="HighlightRectangle"
											Storyboard.TargetProperty="(Rectangle.Opacity)"
											To="{StaticResource HighlightHiddenOpacity}"
											Duration="{StaticResource HighlightChangeDuration}"/>
									</Storyboard>
								</VisualState>

								<!-- Pointer is hovering over the icon -->
								<VisualState x:Name="PointerOver">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighlightRectangle"
											Storyboard.TargetProperty="(Rectangle.Opacity)">
											<DiscreteObjectKeyFrame Value="{StaticResource HighlightPresentOpacity}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>									
								</VisualState>

								<!-- Pointer is pressed on the icon -->
								<VisualState x:Name="Pressed">
									<VisualState.StateTriggers>
										
									</VisualState.StateTriggers>
									<Storyboard>
										<!-- Scale the child elements down to simulate press -->
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="GridScaleTransform"
													Storyboard.TargetProperty="(ScaleTransform.ScaleX)">
											<DiscreteDoubleKeyFrame Value="{StaticResource ScaleTo}"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="GridScaleTransform"
													Storyboard.TargetProperty="(ScaleTransform.ScaleY)">
											<DiscreteDoubleKeyFrame Value="{StaticResource ScaleTo}"/>
										</DoubleAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighlightRectangle"
											Storyboard.TargetProperty="(Rectangle.Opacity)">
											<DiscreteObjectKeyFrame Value="{StaticResource HighlightPresentOpacity}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>



						<xaml:VisualAttachments.AttachedVisuals>

							<xaml:VisualStateNavigation State="Normal">
								<xaml:VisualPointerTrigger PointerEvent="PointerExited"/>
								<xaml:VisualPointerTrigger PointerEvent="PointerCanceled"/>
								<xaml:VisualPointerTrigger PointerEvent="PointerCaptureLost"/>
							</xaml:VisualStateNavigation>

							<xaml:VisualStateNavigation State="PointerOver">
								<xaml:VisualPointerTrigger PointerEvent="PointerEntered"/>
								<xaml:VisualPointerTrigger PointerEvent="PointerReleased"/>
							</xaml:VisualStateNavigation>

							<xaml:VisualStateNavigation State="Pressed">
								<xaml:VisualPointerTrigger PointerEvent="PointerPressed"/>
							</xaml:VisualStateNavigation>

						</xaml:VisualAttachments.AttachedVisuals>			
									

											
						<!-- Serves as highlight -->
						<Rectangle Name="HighlightRectangle"
								Fill="{TemplateBinding HighlightBrush}"
								Opacity="0"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"/>

						<!-- Container grid which is scaled using the render transform -->
						<!-- The name is used in code behind to determine the scale origin and should not be changed -->
						<Grid Name="ScaledContainer"							
							Padding="{TemplateBinding Padding}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch">


							<!-- Render transforms for child elements, composed of ScaleTransform -->
							<Grid.RenderTransform>
								<ScaleTransform  x:Name="GridScaleTransform"
								CenterX="{Binding ScaleCenterX, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
								CenterY="{Binding ScaleCenterY, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
							</Grid.RenderTransform>

							<!-- Image on the bottom of the control which may also act as a background -->
							<Image Name="ImageControl"
								Source="{TemplateBinding ImageSource}"
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								Stretch="{TemplateBinding ImageStretch}"
								/>

							<!--Font Icon visible on the top-->
							<FontIcon Name="IconPresenter"
								Visibility="{Binding ShowFontIcon, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
								Glyph="{TemplateBinding Glyph}"
								FontFamily="{TemplateBinding FontFamily}"
								FontSize="{TemplateBinding FontSize}"
								Foreground="{TemplateBinding Foreground}"
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								/>

						</Grid>
					</Grid>
					
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>
