<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="using:UWPEnhanced.Controls"
	xmlns:converters="using:UWPEnhanced.ValueConverters"
    xmlns:xaml="using:UWPEnhanced.Xaml">

	<converters:BoolToDoubleConverter x:Key="RootGridOpacityConverter" ValueWhenFalse="0.5" ValueWhenTrue="1"/>

	<!-- Default style for an Icon -->
	<Style TargetType="controls:Icon">
		<Setter Property="HorizontalAlignment" Value="Center"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}"/>
		<Setter Property="FontSize" Value="20"/>
		<Setter Property="Padding" Value="5"/>
		<Setter Property="ImageStretch" Value="None"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="controls:Icon" x:Name="Template">
					
					<!-- Main container, presents background and border brush -->
					<Grid x:Name="RootGrid"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"						
						Width="{TemplateBinding Width}"
						Height="{TemplateBinding Height}"
						Opacity="{Binding IsEnabled, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource RootGridOpacityConverter}}">

						<!-- Resources -->
						<!-- Constant values in animations are defined here -->
						<Grid.Resources>
							<x:Double x:Key="ScaleFrom">1</x:Double>
							<x:Double x:Key="ScaleTo">0.9</x:Double>
							<Duration x:Key="ScaleDuration">0:0:0.05</Duration>
							<converters:ProductConverter x:Key="Product"/>
							<converters:BoolToVisibilityConverter x:Key="VisibilityConverter"/>
						</Grid.Resources>

						<!-- Visual Setups defined for the Icon -->
						<xaml:VisualManager.VisualSetups>
							
							<!-- Group responsible for pointer pressed effects -->
							<xaml:VisualSetupGroup Name="PressGroup">

								<!-- Triggers -->
								<xaml:VisualSetupGroup.Triggers>
									<xaml:VisualTransitionCollection>

										<!-- Transition into PointerPressed -->
										<xaml:VisualTransition TransitionTo="PointerPressed">
											<xaml:BindableVisualPointerTrigger PointerEvent="PointerPressed"
												Target="{Binding ElementName=RootGrid}"/>
										</xaml:VisualTransition>

										<!-- Transition out of state (to null state) -->
										<xaml:VisualTransition>
											<xaml:BindableVisualPointerTrigger Target="{Binding ElementName=RootGrid}"
												PointerEvent="PointerReleased, PointerExited, PointerCanceled, PointerCaptureLost"/>
										</xaml:VisualTransition>

									</xaml:VisualTransitionCollection>
								</xaml:VisualSetupGroup.Triggers>

								<!-- Setup for when pointer is pressed -->
								<xaml:VisualSetupDynamic ID="PointerPressed">

									<!-- Reduce the ScaleX and ScaleY properties on Icon's ScaleTransform -->
									<xaml:VisualSetupDynamic.TransitionInStoryboard>
										<Storyboard>
											<DoubleAnimation Storyboard.TargetName="GridScaleTransform"
													Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
													To="{StaticResource ScaleTo}"
													Duration="{StaticResource ScaleDuration}"/>
											<DoubleAnimation Storyboard.TargetName="GridScaleTransform"
													Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
													To="{StaticResource ScaleTo}"
													Duration="{StaticResource ScaleDuration}"/>
										</Storyboard>
									</xaml:VisualSetupDynamic.TransitionInStoryboard>
								
									<!-- Revert the ScaleX and ScaleY properties on Icon's ScaleTransform -->
									<xaml:VisualSetupDynamic.TransitionOutStoryboard>
										<Storyboard>
											<DoubleAnimation Storyboard.TargetName="GridScaleTransform"
													Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
													To="1"
													Duration="{StaticResource ScaleDuration}"/>
											<DoubleAnimation Storyboard.TargetName="GridScaleTransform"
													Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
													To="1"
													Duration="{StaticResource ScaleDuration}"/>
										</Storyboard>
									</xaml:VisualSetupDynamic.TransitionOutStoryboard>

								</xaml:VisualSetupDynamic>

							</xaml:VisualSetupGroup>
						</xaml:VisualManager.VisualSetups>						

						<!-- Container grid which is scaled using the render transform -->
						<!-- The name is used in code behind to determine the scale origin and should not be changed -->
						<Grid Name="ScaledContainer"
							Padding="{TemplateBinding Padding}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch">

							<!-- Render transforms for child elements, composed of ScaleTransform -->
							<Grid.RenderTransform>
								<ScaleTransform  x:Name="GridScaleTransform"
								CenterX="{Binding ScaleCenterX, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource Product}, ConverterParameter=1}"
								CenterY="{Binding ScaleCenterY, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource Product}, ConverterParameter=1}"/>
							</Grid.RenderTransform>

							<!-- Image on the bottom of the control which may also act as a background -->
							<Image Name="ImageControl"
								Source="{TemplateBinding ImageSource}"
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								Stretch="{TemplateBinding ImageStretch}"
								/>

							<!--Font Icon visible on the top-->
							<FontIcon Name="IconPresenter"
								Visibility="{Binding ShowFontIcon, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
								Glyph="{TemplateBinding Glyph}"
								FontFamily="{TemplateBinding FontFamily}"
								FontSize="{TemplateBinding FontSize}"
								Foreground="{TemplateBinding Foreground}"
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								/>

						</Grid>

						<!-- Gray-ish background that also prevents action when the Icon is disabled -->
						<Rectangle Fill="Black" Opacity="0.1" Visibility="{Binding IsEnabled, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource VisibilityConverter}, ConverterParameter=x}"/>

					</Grid>					
					
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>
